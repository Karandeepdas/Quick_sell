{"ast":null,"code":"export const groupTicketsByStatus = tickets => {\n  const groups = tickets.reduce((result, ticket) => {\n    if (!result[ticket.status]) {\n      result[ticket.status] = [];\n    }\n    result[ticket.status].push(ticket);\n    return result;\n  }, {\n    Backlog: [],\n    Todo: [],\n    \"In progress\": [],\n    Done: [],\n    Cancelled: []\n  });\n  return groups;\n};\nexport const groupTicketsByPriority = tickets => {\n  const groups = tickets.reduce((result, ticket) => {\n    const priority = getPriotityLabel(ticket.priority);\n    if (!result[priority]) {\n      result[priority] = [];\n    }\n    result[priority].push(ticket);\n    return result;\n  }, {\n    \"No priority\": [],\n    Urgent: [],\n    High: [],\n    Medium: [],\n    Low: []\n  });\n  return groups;\n};\nexport const groupTicketsByUserId = tickets => {\n  const groups = tickets.reduce((result, ticket) => {\n    if (!result[ticket.userId]) {\n      result[ticket.userId] = [];\n    }\n    result[ticket.userId].push(ticket);\n    return result;\n  }, {});\n  return groups;\n};\nexport const mapUsersByUserId = users => {\n  let group = users.reduce((accumulator, user) => {\n    accumulator[user.id] = user;\n    return accumulator;\n  }, {});\n  return group;\n};\nconst getPriotityLabel = priority => {\n  switch (priority) {\n    case 0:\n      return \"No priority\";\n    case 1:\n      return \"Low\";\n    case 2:\n      return \"Medium\";\n    case 3:\n      return \"High\";\n    case 4:\n      return \"Urgent\";\n    default:\n      return \"NA\";\n  }\n};\nconst orderByPriority = tickets => tickets.sort((a, b) => a.priority > b.priority ? -1 : 1);\nconst orderByTitle = tickets => tickets.sort((a, b) => a.title < b.title ? -1 : 1);\nexport const loadGrid = (tickets, grouping, ordering) => {\n  let orderedTickets;\n  if (ordering === \"priority\") orderedTickets = orderByPriority(tickets);else orderedTickets = orderByTitle(tickets);\n  switch (grouping) {\n    case \"status\":\n      return groupTicketsByStatus(orderedTickets);\n    case \"priority\":\n      return groupTicketsByPriority(orderedTickets);\n    case \"user\":\n      return groupTicketsByUserId(orderedTickets);\n    default:\n      return groupTicketsByUserId(orderedTickets);\n  }\n};","map":{"version":3,"names":["groupTicketsByStatus","tickets","groups","reduce","result","ticket","status","push","Backlog","Todo","Done","Cancelled","groupTicketsByPriority","priority","getPriotityLabel","Urgent","High","Medium","Low","groupTicketsByUserId","userId","mapUsersByUserId","users","group","accumulator","user","id","orderByPriority","sort","a","b","orderByTitle","title","loadGrid","grouping","ordering","orderedTickets"],"sources":["C:/Users/lenovo/Desktop/FINAL_QUICKSELL/src/utils/util.js"],"sourcesContent":["export const groupTicketsByStatus = (tickets) => {\n  const groups = tickets.reduce(\n    (result, ticket) => {\n      if (!result[ticket.status]) {\n        result[ticket.status] = [];\n      }\n      result[ticket.status].push(ticket);\n      return result;\n    },\n    { Backlog: [], Todo: [], \"In progress\": [], Done: [], Cancelled: [] }\n  );\n\n  return groups;\n};\n\nexport const groupTicketsByPriority = (tickets) => {\n  const groups = tickets.reduce(\n    (result, ticket) => {\n      const priority = getPriotityLabel(ticket.priority);\n      if (!result[priority]) {\n        result[priority] = [];\n      }\n      result[priority].push(ticket);\n      return result;\n    },\n    { \"No priority\": [], Urgent: [], High: [], Medium: [], Low: [] }\n  );\n\n  return groups;\n};\n\nexport const groupTicketsByUserId = (tickets) => {\n  const groups = tickets.reduce((result, ticket) => {\n    if (!result[ticket.userId]) {\n      result[ticket.userId] = [];\n    }\n    result[ticket.userId].push(ticket);\n    return result;\n  }, {});\n\n  return groups;\n};\n\nexport const mapUsersByUserId = (users) => {\n  let group = users.reduce((accumulator, user) => {\n    accumulator[user.id] = user;\n    return accumulator;\n  }, {});\n\n  return group;\n};\n\nconst getPriotityLabel = (priority) => {\n  switch (priority) {\n    case 0:\n      return \"No priority\";\n    case 1:\n      return \"Low\";\n    case 2:\n      return \"Medium\";\n    case 3:\n      return \"High\";\n    case 4:\n      return \"Urgent\";\n    default:\n      return \"NA\";\n  }\n};\n\nconst orderByPriority = (tickets) =>\n  tickets.sort((a, b) => (a.priority > b.priority ? -1 : 1));\nconst orderByTitle = (tickets) =>\n  tickets.sort((a, b) => (a.title < b.title ? -1 : 1));\n\nexport const loadGrid = (tickets, grouping, ordering) => {\n  let orderedTickets;\n  if (ordering === \"priority\") orderedTickets = orderByPriority(tickets);\n  else orderedTickets = orderByTitle(tickets);\n\n  switch (grouping) {\n    case \"status\":\n      return groupTicketsByStatus(orderedTickets);\n    case \"priority\":\n      return groupTicketsByPriority(orderedTickets);\n    case \"user\":\n      return groupTicketsByUserId(orderedTickets);\n    default:\n      return groupTicketsByUserId(orderedTickets);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}